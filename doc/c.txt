1: 扩展名
    .a  目标文件构成的库文件
    .C .cc .cpp 标识为C++源码的文件
    .h  说明文件是程序所包含的头文件
    .i  标示文件是已经预处理过的C源代码,一般为中间代码文件 
    .ii 是已经预处理过的C++源代码文件,也是中间文件.
    .o  是编译后的目标文件,源文件生成的中间目标文件.
    .s  是汇编语言源代码文件.
    .S  是经过预编译的汇编语言源代码文件.
    .O  是编译以后的程序目标文件.Object file,目标文件经过链接后变成可执行文件.

2: gcc
   gcc --help
    -pass-exit-codes         在某一阶段退出时返回最高的错误码.
    --help                   Display this information
    --target-help            Display target specific command line options
    -dumpspecs               显示所有内建的字符串.
    -dumpversion             显示编译器的版本号.
    -dumpmachine             显示编译器的目标处理器.
    -print-search-dirs       显示编译器的搜索路径.
    -print-libgcc-file-name  显示编译器的伴随库名字
    -print-file-name=<lib>   显示<库>的完整路径.
    -print-prog-name=<prog>  显示编辑器组建<程序>的完整路径.

    -print-multiarch         Display the target's normalized GNU triplet, used as
                           a component in the library path
    -print-multi-directory   Display the root directory for versions of libgcc
    -print-multi-lib         Display the mapping between command line options and
                           multiple library search directories
    -print-multi-os-directory Display the relative path to OS libraries
    -print-sysroot           Display the target libraries directory
    -print-sysroot-headers-suffix Display the sysroot suffix used to find headers
    -Wa,<options>            Pass comma-separated <options> on to the assembler汇编器
    -Wp,<options>            Pass comma-separated <options> on to the preprocessor预处理器
    -Wl,<options>            Pass comma-separated <options> on to the linker链接器
    -Xassembler <arg>        Pass <arg> on to the assembler汇编器
    -Xpreprocessor <arg>     Pass <arg> on to the preprocessor
    -Xlinker <arg>           Pass <arg> on to the linker
    -save-temps              Do not delete intermediate files 不删除中间文件.
    -save-temps=<arg>        Do not delete intermediate files
    -no-canonical-prefixes   Do not canonicalize paths when building relative
                           prefixes to other gcc components
    -pipe                    Use pipes rather than intermediate files 使用管道代替临时文件.
    -time                    Time the execution of each subprocess 为每个子进程计时.
    -specs=<file>            Override built-in specs with the contents of <file> 用<文件>的内容覆盖内建的specs文件.
    -std=<standard>          Assume that the input sources are for <standard> 指定输入源文件遵循的标准.
    --sysroot=<directory>    Use <directory> as the root directory for headers and libraries 将<目录>作为头文件和库文件的根目录.
    -B <directory>           Add <directory> to the compiler's search paths 把<B>目录添加到编译器的搜索路径中.
    -v                       Display the programs invoked by the compiler 显示编译器调用的程序.
    -###                     Like -v but options quoted and commands not executed 同上,但选项被引号括住,并且不执行命令.
    -E                       Preprocess only; do not compile, assemble or link 只预处理,不进行编译,汇编和链接.
    -S                       Compile only; do not assemble or link 编译到汇编语言, 不进行汇编和链接.
    -c                       Compile and assemble, but do not link 编译.汇编到目标代码, 不进行链接.
    -o <file>                Place the output into <file> 输出到<文件>
    -pie                     Create a position independent executable
    -shared                  Create a shared library
    -x <language>            Specify the language of the following input files Permissible languages include: c c++ assembler none 'none' means revert to the default behavior of guessing the language based on the file's extension 指定其后输入文件的语言.允许有c,c++,assembler 等

3: 编译数学函数 
gcc -lm -W xxx.c -o xxx.out
printf % - 0 m.n l或h 格式字符
    %格式说明的起始符号， 有-表示左对齐输出，省略表示右对齐输出。0 有0表示指定空位填0 省略表示空位不填。
    m.n m指域宽，即对应的输出项在输出设备上所占的字符数。N指精度。用于说明输出的实型数的小数位数。对数值型的来说，未指定n时，隐含的精度为n=6位。
    l或h:l对整型指long型，对实型指double型。h用于将整型的格式字符修正为short型。

    d格式：用来输出十进制整数。有以下几种用法： 
        %d：按整型数据的实际长度输出。 
        %md：m为指定的输出字段的宽度。如果数据的位数小于m，则左端补以空格，若大于m，则按实际位数输出。 
        %ld：输出长整型数据。 

    o格式：以无符号八进制形式输出整数。对长整型可以用"%lo"格式输出。同样也可以指定字段宽度用“%mo”格式输出
    x格式：以无符号十六进制形式输出整数。对长整型可以用"%lx"格式输出。同样也可以指定字段宽度用"%mx"格式输出
    u格式：以无符号十进制形式输出整数。对长整型可以用"%lu"格式输出。同样也可以指定字段宽度用“%mu”格式输出
    c格式：输出一个字符
    s格式：用来输出一个串
        %s：例如:printf("%s", "CHINA")输出"CHINA"字符串（不包括双引号）。 
        %ms：输出的字符串占m列，如字符串本身长度大于m，则突破获m的限制,将字符串全部输出。若串长小于m，则左补空格。 
        %-ms：如果串长小于m，则在m列范围内，字符串向左靠，右补空格。 
        %m.ns：输出占m列，但只取字符串中左端n个字符。这n个字符输出在m列的右侧，左补空格，注意：如果n未指定，默认为0。 
        %-m.ns：其中m、n含义同上，n个字符输出在m列范围的左侧，右补空格。如果n>m，则自动取n值，即保证n个字符正常输出，注意：如果n未指定，默认为0。
        如果是sprintf(desc, "%m.ns", sour);   如果desc空间够的话，会在%m.ns 串 的结尾自动补null字符，不同于strncpy。
        例如 ：sprintf(desc, "%.3s", "123456");   desc如果空间>=4字节的话，第4个字节将是null字符。
    f格式：用来输出实数（包括单、双精度），以小数形式输出。有以下几种用法： 
        %f：不指定宽度，整数部分全部输出并输出6位小数。 
        %m.nf：输出共占m列，其中有n位小数，如数值宽度小于m左端补空格。 
        %-m.nf：输出共占n列，其中有n位小数，如数值宽度小于m右端补空格。 

        ⑧e格式：以指数形式输出实数。可用以下形式： 
        %e：数字部分（又称尾数）输出6位小数，指数部分占5位或4位。 
        %m.ne和%-m.ne：m、n和”-”字符含义与前相同。此处n指数据的数字部分的小数位数，m表示整个输出数据所占的宽度。 
        g格式：自动选f格式或e格式中较短的一种输出，且不输出无意义的零

    关于printf函数的进一步说明：
        如果想输出字符"%",则应该在“格式控制”字符串中用连续两个%表示，如: 
        printf("%f%%", 1.0/3); 
        输出0.333333%
    对于单精度数，使用%f格式符输出时，仅前7位是有效数字，小数6位
    对于双精度数，使用%lf格式符输出时，前16位是有效数字，小数6位
        %A　　　　浮点数、十六进制数字和p-记法（Ｃ９９）
        %c　　　　一个字符　
        %d　　　　有符号十进制整数　
        %e　　　　浮点数、e-记数法
        %E　　　　浮点数、Ｅ-记数法
        %f　　　　浮点数、十进制记数法　　
        %g　　　　根据数值不同自动选择％f或％e．
        %G　　　　根据数值不同自动选择％f或％e.
        %i               有符号十进制数（与％d相同）
        %o　　　　无符号八进制整数
        %p　　　　指针　　　　
        %s　　　　字符串
        %u　　　　无符号十进制整数
        %x　　　　使用十六进制数字０f的无符号十六进制整数　
        %X　　　　使用十六进制数字０f的无符号十六进制整数
        %%　　　　打印一个百分号
